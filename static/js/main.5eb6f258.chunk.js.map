{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","imgurl","deepCopyFunction","inObject","outObject","value","key","Array","isArray","fruit","tfvname","toLowerCase","split","join","replace","className","alt","src","CardList","fruits","map","imageurl","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","state","fetch","proxyurl","then","response","json","fruitsApi","results","this","filteredFruits","filter","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5eb6f258.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => {\n   \n    const deepCopyFunction = inObject => {\n        let outObject, value, key\n      \n        if(typeof inObject !== \"object\" || inObject === null) {\n          return inObject // Return the value if inObject is not an object\n        }\n      \n        // Create an array or object to hold the values\n        outObject = Array.isArray(inObject) ? [] : {}\n      \n        for (key in inObject) {\n          value = inObject[key]\n      \n          // Recursively (deep) copy for nested objects, including arrays\n          outObject[key] = (typeof value === \"object\" && value !== null) ? deepCopyFunction(value) : value\n        }\n        \n        return outObject\n      }\n\n    let imgurl = deepCopyFunction(props.fruit.tfvname);\n    imgurl = imgurl.toLowerCase();\n    imgurl = imgurl.split(\" \").join(\"\"); \n    imgurl = imgurl.replace(\"almond\",\"almondfruit\");\n    imgurl = imgurl.replace(\"banana\",\"bananauk2\");\n    imgurl = imgurl.replace(\"tropicalalmondfruit\",\"talmond1\");\n    imgurl = imgurl.replace(\"aubergine\",\"aubermk\");\n    imgurl = imgurl.replace(\"cashewapple\",\"cashewapp\");\n    imgurl = imgurl.replace(\"chilipepper\",\"thaichili2\");\n    imgurl = imgurl.replace(\"dragonfruit\",\"dragon\");\n    imgurl = imgurl.replace(\"fennel\",\"fennelflr\");\n    imgurl = imgurl.replace(\"jambolan\",\"jambu\");\n    imgurl = imgurl.replace(\"kiwi\",\"kiwi3\");\n    imgurl = imgurl.replace(\"langsat\",\"langsat1\");\n    imgurl = imgurl.replace(\"curryleaf\",\"limda\");\n    imgurl = imgurl.replace(\"lychee\",\"lychee2\");\n    imgurl = imgurl.replace(\"mango\",\"kesarcut\");\n    imgurl = imgurl.replace(\"kesarcutsteen\",\"mangosteencut\");\n    imgurl = imgurl.replace(\"neem\",\"neemseed1\");\n    imgurl = imgurl.replace(\"olive\",\"olive2\");\n    imgurl = imgurl.replace(\"passionfruit\",\"passionyel\");\n    imgurl = imgurl.replace(\"peanut\",\"peanutsplit\");\n    imgurl = imgurl.replace(\"pecan\",\"pecantree\");\n    imgurl = imgurl.replace(\"pineapple\",\"pineapple2\");\n    imgurl = imgurl.replace(\"pineapple2guava\",\"feijoa\");\n    imgurl = imgurl.replace(\"rosemary\",\"rosemaryflr\");\n    imgurl = imgurl.replace(\"sugarapple\",\"sitafarcut\");\n    imgurl = imgurl.replace(\"turmeric\",\"tumroot\");\n    imgurl = imgurl.replace(\"mung\",\"mungseed\");\n    imgurl = imgurl.replace(\"curryleaf\",\"limbdaseeds\");\n    imgurl = imgurl.replace(\"manilatamarind\",\"mitiambli5\");\n    imgurl = imgurl.replace(\"sesame\",\"sesameseeds\");\n    imgurl = imgurl.replace(\"sittu\",\"sittu5\");\n    imgurl = imgurl.replace(\"borajujube\",\"bora3\");\n    imgurl = imgurl.replace(\"arbi\",\"arbiplant\");\n\n    return(\n      <div className=\"card-container\">\n      <img alt={props.fruit.tfvname}\n      src={`http://tropicalfruitandveg.com/images/${imgurl}.jpg`}/>\n          <h2>{props.fruit.tfvname}</h2> \n      </div>);\n};\n\n","import React from 'react';\nimport { Card } from '../card/card.component.jsx'\n\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n\n    <div className='card-list'>\n    {props.fruits.map(fruit =>(\n        <Card key={fruit.imageurl} fruit={fruit}/>\n      ))}\n    </div>\n);","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input  \n        className=\"search\" \n        type='search' \n        placeholder={placeholder} \n        onChange={handleChange }/>\n)\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state= {\n      fruits:[],\n      searchField: ''\n    };\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n  componentDidMount(){\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = 'http://tropicalfruitandveg.com/api/tfvjsonapi.php?search=all';\n    fetch(proxyurl + url)\n    .then(response => response.json())\n    .then(fruitsApi => this.setState({fruits: fruitsApi.results}))\n  }\n  \n  \n  render(){\n    const { fruits, searchField } = this.state;\n      const filteredFruits = fruits.filter(fruit =>\n        fruit.tfvname.toLowerCase().includes(searchField.toLowerCase())\n      )\n  return (\n    <div className=\"App\">\n      <h1>Fruits</h1>\n        <SearchBox placeholder='search fruits' \n          handleChange={this.handleChange}/>\n          <p><br></br></p>\n        <CardList fruits = {filteredFruits}>\n        </CardList>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}